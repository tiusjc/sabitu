<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Form extends MY_Controller {

    function __construct() {
        parent::__construct();
        $this->load->dbforge();
        $this->output->enable_profiler(TRUE);
        
    }

    public function index(){

     try{
        
                
        $tabela = "form";
        

        $this->crud->set_subject('Cadastro de Formulários');

        $this->crud->columns('descricao','sigla','data_inicio','data_fim','status','inscricoes','campos','linhas');
      
        $this->crud->set_table( $tabela );
      
        $this->crud->callback_column('inscricoes',array($this,'count_inscricoes'));
        $this->crud->callback_column('campos',array($this,'count_campos'));
        $this->crud->callback_column('linhas',array($this,'count_linhas'));

        $this->crud->callback_after_insert(array($this, 'cria_table'));
        $this->crud->callback_after_update(array($this, 'cria_table'));

        $this->crud->callback_before_delete(array($this, 'before_delete'));

        
        $output = $this->crud->render();
        $this->load->view('gerenciar.php',$output);    

      } catch(Exception $e) {
        fb::info($e->getMessage().' --- '.$e->getTraceAsString());
      }    
    }

    public function before_delete( $primary_key ) {
      
      $query_campo  = $this->db->query('SELECT COUNT(*) AS qtd_campos FROM information_schema.columns WHERE table_schema ="sabitu" AND table_name ="'.$row->sigla.'"');
      $campos = $query_campo->row();
      if( $campos->qtd_campos > 4){
        $this->session->set_flashdata('mensagem',
            '<div class="alert alert-danger">Por favor, primeiro remova os campos deste formulário!</div>');
          return false;
      }else{

        $this->session->set_userdata( 'form_id', 0 );
        $this->form_id = 0;
        return $this->db->insert('user_logs', array('usuario_id' => $this->usuario_id,'form_id' => $primary_key,'action'=>'delete', 'data' => date('Y-m-d H:i:s')));
        
      }


    }


 


    public function count_inscricoes($primary_key, $row)
    {
      if($this->db->table_exists($row->sigla)){
        $query_inscricoes = $this->db->query("SELECT COUNT(*) AS qtd_inscricoes FROM $row->sigla WHERE form_id=$row->id");
        $inscricoes = $query_inscricoes->row();
        return $inscricoes->qtd_inscricoes;
      }else{
        return 0;
      
      }
    }

    public function count_campos($value, $row)
    {
      if($this->db->table_exists($row->sigla)){
        $query_campo  = $this->db->query('SELECT COUNT(*) AS qtd_campos FROM information_schema.columns WHERE table_schema ="sabitu" AND table_name ="'.$row->sigla.'"');
        $campos = $query_campo->row();
        return $campos->qtd_campos - 4;
      }else{
        return 0;
      }
    } 

    public function count_linhas($value, $row){
      
     if($this->db->table_exists($row->sigla)){

      $query_linhas = $this->db->query("SELECT COUNT(*) AS qtd_linhas FROM linhadepesquisa WHERE form_id =$row->id");
      $linhas = $query_linhas->row();
      return $linhas->qtd_linhas;
    }else{
        return 0;
      
    }
  }








    // function backup(){

    //     $this->load->dbutil();

    //     $table01 = $this->input->post('sigla');
    //     $table02 = $this->input->post('sigla')."_linhas";
    //     $table03 = "campos_".$this->input->post('sigla');

    //     $prefs = array(
    //                     'tables'      => array($table01, $table02, $table03),  // Array of tables to backup.
    //                     'ignore'      => array(),           // List of tables to omit from the backup
    //                     'format'      => 'zip',             // gzip, zip, txt
    //                     'add_drop'    => TRUE,              // Whether to add DROP TABLE statements to backup file
    //                     'add_insert'  => TRUE,              // Whether to add INSERT data to backup file
    //                     'newline'     => "\n"               // Newline character used in backup file
    //                   );

    //     $this->dbutil->backup($prefs);

    //     $backup =& $this->dbutil->backup($prefs);

    //     $this->load->helper('file');
    //     write_file('assets/uploads/files/'.$table01.'.zip', $backup); 

    //     Load the download helper and send the file to your desktop
    //     $this->load->helper('download');
    //     force_download('mybackup.gz', $backup);

    //   }

  

  function cria_table( $array_post ){


        if (!$this->db->table_exists( 'user_logs' ) ){

            $fields = array(
                        
                         'id' => array(
                         'type'                 => 'INT',
                         'constraint'           => 11, 
                         'auto_increment'       => TRUE
                         ),

                         'usuario_id'         => array(
                         'type'                 => 'INT',
                         'constraint'           => 11 
                         ),

                         'form_id' => array(
                         'type'                 => 'INT',
                         'constraint'           => 11
                         ),
                          
                         'action'               => array(
                         'type'                 => 'VARCHAR',
                         'constraint'           => 200
                         ),  

                         'data'                => array(
                         'type'                => 'DATETIME'
                         ),

            );

            $this->dbforge->add_field($fields);
            $this->dbforge->add_key('id', TRUE);
            $this->dbforge->create_table( 'user_logs' );
        }

        // CRIA A TABELA FORMULÁRIOS
        $nome_tabela = $array_post['sigla'];
      
        $this->dbforge->drop_table( $nome_tabela );
        
        $fields = array(
                      
                      'id'               => array(
                      'type'           => 'INT',
                      'constraint'     => 11, 
                      'auto_increment' => TRUE
                       ),

                      'usuario_id'        => array(
                      'type'           => 'INT',
                      'constraint'     => 11 
                       ),

                       'form_id'  => array(
                           'type'              => 'INT',
                           'constraint'        => 11
        
                       ),
                       'data_cadastro' => array(
                           'type'              => 'DATETIME'
        
                       ),

        );
        
        $attributes = array('ENGINE' => 'InnoDB');
        $this->dbforge->add_field($fields);
        $this->dbforge->add_key('id', TRUE);
        $this->dbforge->create_table( $nome_tabela, TRUE, $attributes );
        
   
        return $array_post;
       
    }


}